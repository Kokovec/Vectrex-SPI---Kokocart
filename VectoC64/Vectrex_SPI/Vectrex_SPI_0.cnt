BANK 0
EQU $00 
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First  counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third  counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth  counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth  counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_a
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode
LABEL $F62B Rot_VL_M_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
EQU $14 scale
LABEL $C880 ship_y
COMMENT_LABEL $C880 1 byte
LABEL $C881 ship_x
COMMENT_LABEL $C881 1 byte
LABEL $C882 ship_angle
COMMENT_LABEL $C882 2 bytes
LABEL $C884 c64_ship_angle
LABEL $C885 counter
LABEL $C886 counter2
LABEL $C887 rot_VL
COMMENT_LABEL $C887 13 bytes
EQU $1E initialization
EQU $60 main
LABEL $010D SPI_Start
LABEL $0063 main_loop
LABEL $007B x_done
LABEL $0074 left_move
EQU $6D right_move
LABEL $0095 y_done
LABEL $0090 no_y_movement
LABEL $0089 down_move
LABEL $0082 up_move
LABEL $009E command_from_C64
LABEL $00A6 get_SPI
LABEL $00E8 draw_ship
LABEL $00E3 get_c6_data
LABEL $00C5 check_right
LABEL $00CF check_down
LABEL $00D9 check_left
LABEL $013E rotate_ship
LABEL $01D2 spi_string
LABEL $01CD angles
LABEL $01B4 ship_vl
LABEL $0157 SPI_Start_Test
LABEL $0160 Looper
LABEL $0188 ascii_number
LABEL $018A ascii_next
LABEL $019A ascii_number_lo
LABEL $019C ascii_next_lo
LABEL $01AB new_num
LABEL $01DC *
COMMENT_LINE $0000 ==========================================================================
COMMENT_LINE $0000 Vectrex Kokocart Demo
COMMENT_LINE $0000 This program is a demo for the Vectrex Kokocart.
COMMENT_LINE $0000 Created with VIDE (http://vide.malban.de/what-is-vide)
COMMENT_LINE $0000 For more information see Vectorbolt issue #9 (http://furyunlimited.com/_sgg/m3_1.htm).
COMMENT_LINE $0000 by Dan Siewers
COMMENT_LINE $0000 This program is free software: you can redistribute it and/or modify
COMMENT_LINE $0000 it under the terms of the GNU General Public License as published by
COMMENT_LINE $0000 the Free Software Foundation, either version 3 of the License, or
COMMENT_LINE $0000 (at your option) any later version.
COMMENT_LINE $0000 This program is distributed in the hope that it will be useful,
COMMENT_LINE $0000 but WITHOUT ANY WARRANTY; without even the implied warranty of
COMMENT_LINE $0000 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
COMMENT_LINE $0000 GNU General Public License for more details.
COMMENT_LINE $0000 You should have received a copy of the GNU General Public License
COMMENT_LINE $0000 along with this program.  If not, see <https://www.gnu.org/licenses/>.
COMMENT_LINE $0000 ===========================================================================
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 DEFINE SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 load vectrex bios routine definitions
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 Rot_VL_ab       EQU     $F610   ;
COMMENT_LINE $0000 Rot_VL          EQU     $F616   ;
COMMENT_LINE $0000 Rot_VL_Mode_a   EQU     $F61F   ;
COMMENT_LINE $0000 Rot_VL_Mode     EQU     $F62B   ;
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 Variable / RAM SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 insert your variables (RAM usage) in the BSS section
COMMENT_LINE $0000 user RAM starts at $c880
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 HEADER SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 The cartridge ROM starts at address 0
COMMENT_LINE $0000 the first few bytes are mandatory, otherwise the BIOS will not load
COMMENT_LINE $0000 the ROM file, and will start MineStorm instead
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D height, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $001D end of game header
COMMENT $001E Buffer for print hex char routine
FORCE_NO_SYMBOL $0020
FORCE_NO_SYMBOL $0025
FORCE_NO_SYMBOL $0028
FORCE_NO_SYMBOL $002A
COMMENT $002D ship y,x position
FORCE_NO_SYMBOL $002D
FORCE_SYMBOL $0030 ship_y
COMMENT $0033 VL draw pattern (solid line)
FORCE_NO_SYMBOL $0033
FORCE_NO_SYMBOL $0035
COMMENT $0038 Vectrex ship starts pointing up
FORCE_NO_SYMBOL $0038
FORCE_SYMBOL $003B ship_angle
COMMENT $003E draw scale to 50
FORCE_NO_SYMBOL $003E
FORCE_SYMBOL $0040 VIA_t1_cnt_lo
COMMENT $0043 these set up the joystick
FORCE_NO_SYMBOL $0043
COMMENT $0045 enquiries
FORCE_SYMBOL $0045 Vec_Joy_Mux_1_X
COMMENT $0048 allowing only all directions
FORCE_NO_SYMBOL $0048
COMMENT $004A for joystick one
FORCE_SYMBOL $004A Vec_Joy_Mux_1_Y
COMMENT $004D this setting up saves a few
FORCE_NO_SYMBOL $004D
COMMENT $004F hundred cycles
FORCE_SYMBOL $004F Vec_Joy_Mux_2_X
COMMENT $0052 don't miss it, if you don't
FORCE_SYMBOL $0052 Vec_Joy_Mux_2_Y
COMMENT_LINE $0055 need the second joystick!
COMMENT $0055 set c64 ship angle to: no move
FORCE_NO_SYMBOL $0055
FORCE_SYMBOL $0057 c64_ship_angle
COMMENT $005A clear the SPI TX data mem location
FORCE_NO_SYMBOL $005A
COMMENT $005D clear general variable
FORCE_SYMBOL $005D counter
COMMENT_LINE $0060 ***************************************************************************
COMMENT_LINE $0060 CODE SECTION
COMMENT_LINE $0060 ***************************************************************************
COMMENT_LINE $0060 here the cartridge program starts off
COMMENT $0060 Wait for C64
FORCE_SYMBOL $0060 SPI_Start
COMMENT $0063 read joystick positions
FORCE_SYMBOL $0063 Joy_Digital
COMMENT $0066 load joystick 1 position
FORCE_SYMBOL $0066 Vec_Joy_1_X
COMMENT $0069 if zero, than no x position
COMMENT $006B if negative, than left
COMMENT_LINE $006D otherwise right
COMMENT $006D C64 ship moves right
FORCE_NO_SYMBOL $006D
FORCE_SYMBOL $006F c64_ship_angle
COMMENT $0072 goto x done
COMMENT $0074 C64 ship moves left
FORCE_NO_SYMBOL $0074
FORCE_SYMBOL $0076 c64_ship_angle
COMMENT $0079 goto x done
COMMENT $007B load joystick 1 position
FORCE_SYMBOL $007B Vec_Joy_1_Y
COMMENT_LINE $007E Y to A
COMMENT $007E if zero, than no y position
COMMENT $0080 if negative, than down
COMMENT_LINE $0082 otherwise up
COMMENT $0082 C64 ship moves up
FORCE_NO_SYMBOL $0082
FORCE_SYMBOL $0084 c64_ship_angle
COMMENT $0087 goto y done
COMMENT $0089 C64 ship moves down
FORCE_NO_SYMBOL $0089
FORCE_SYMBOL $008B c64_ship_angle
COMMENT $008E goto y done
COMMENT $0090 C64 ship doesn't move
FORCE_NO_SYMBOL $0090
FORCE_SYMBOL $0092 c64_ship_angle
COMMENT $0095 check if received command from C64 last go'round
FORCE_SYMBOL $0095 counter
COMMENT $0098 yep, go take care of that
COMMENT $009A nope, check again without sending out data to SPI
FORCE_NO_SYMBOL $009A
COMMENT $009E reset the command recieved flag
FORCE_NO_SYMBOL $009E
FORCE_SYMBOL $00A0 counter
COMMENT $00A3 get the new C64 ship angle
FORCE_SYMBOL $00A3 c64_ship_angle
COMMENT $00A6 store TX data in SPI out memory location
FORCE_NO_SYMBOL $00A6
COMMENT $00A9 ping the SPI interface
FORCE_NO_SYMBOL $00A9
FORCE_SYMBOL $00AD Delay_1
COMMENT $00B0 check if anything from C64
FORCE_NO_SYMBOL $00B0
COMMENT $00B3 nope,
COMMENT $00B5 yep, see if just a ping from c64
FORCE_NO_SYMBOL $00B5
COMMENT $00B7 it's not, go draw Vectrex ship
COMMENT $00B9 move up?
FORCE_NO_SYMBOL $00B9
FORCE_SYMBOL $00BD ship_y
FORCE_NO_SYMBOL $00C0
COMMENT $00C5 move right?
FORCE_NO_SYMBOL $00C5
FORCE_SYMBOL $00CC ship_x
COMMENT $00CF move down?
FORCE_NO_SYMBOL $00CF
FORCE_SYMBOL $00D6 ship_y
COMMENT $00D9 move left?
FORCE_NO_SYMBOL $00D9
FORCE_SYMBOL $00E0 ship_x
COMMENT $00E3 it is! flag it
FORCE_NO_SYMBOL $00E3
FORCE_SYMBOL $00E5 counter
COMMENT $00E8 Vectrex BIOS recalibration
FORCE_SYMBOL $00E8 Wait_Recal
COMMENT $00EB Sets the intensity of the
FORCE_SYMBOL $00EB Intensity_5F
FORCE_SYMBOL $00EE ship_angle
FORCE_SYMBOL $00F1 rotate_ship
COMMENT $00F4 load 50
FORCE_NO_SYMBOL $00F4
COMMENT $00F6 50 as scaling
FORCE_SYMBOL $00F6 VIA_t1_cnt_lo
FORCE_SYMBOL $00F9 ship_y
FORCE_SYMBOL $00FC Moveto_d
COMMENT $00FF load 50
FORCE_SYMBOL $00FF scale
COMMENT $0101 50 as scaling
FORCE_SYMBOL $0101 VIA_t1_cnt_lo
FORCE_SYMBOL $0104 rot_VL
FORCE_SYMBOL $0107 Draw_VL_mode
COMMENT $010A and repeat forever
FORCE_SYMBOL $010A main_loop
COMMENT_LINE $010D Establish C64 connection
COMMENT $010D wait for C64 to send out a ping ($5A)
FORCE_NO_SYMBOL $010D
COMMENT $010F store $00 in SPI TX buffer (get data but don't send out)
FORCE_NO_SYMBOL $010F
FORCE_NO_SYMBOL $0112
FORCE_NO_SYMBOL $0116
FORCE_SYMBOL $0118 Delay_b
COMMENT $011B Vectrex BIOS recalibration
FORCE_SYMBOL $011B Wait_Recal
FORCE_NO_SYMBOL $011E
FORCE_SYMBOL $0120 Delay_b
FORCE_SYMBOL $0123 Intensity_5F
FORCE_NO_SYMBOL $0126
FORCE_SYMBOL $0129 Moveto_d
FORCE_SYMBOL $012C spi_string
COMMENT $012F Text position relative Y
FORCE_NO_SYMBOL $012F
COMMENT $0131 Text position relative X
COMMENT $0133 Vectrex BIOS print routine
FORCE_SYMBOL $0133 Print_Str_d
COMMENT $0136 check to see if C64 has responded
FORCE_NO_SYMBOL $0136
FORCE_NO_SYMBOL $0139
COMMENT_LINE $013E Rotate Vectrex ship
COMMENT_LINE $013E Param: X = rotation angle
FORCE_SYMBOL $013E DP_to_C8
FORCE_SYMBOL $0141 scale
COMMENT $0143 50 as scaling
FORCE_SYMBOL $0143 VIA_t1_cnt_lo
FORCE_SYMBOL $0146 angles
FORCE_SYMBOL $014A rot_VL
FORCE_SYMBOL $014D ship_vl
FORCE_SYMBOL $0150 Rot_VL_Mode
FORCE_SYMBOL $0153 DP_to_D0
COMMENT_LINE $0157 Used for dev testing
FORCE_NO_SYMBOL $0157
FORCE_NO_SYMBOL $015A
FORCE_SYMBOL $015D counter
FORCE_NO_SYMBOL $0160
FORCE_NO_SYMBOL $0164
FORCE_SYMBOL $0166 Delay_b
COMMENT $0169 Vectrex BIOS recalibration
FORCE_SYMBOL $0169 Wait_Recal
FORCE_SYMBOL $016C Intensity_5F
COMMENT $016F address of string
FORCE_NO_SYMBOL $016F
COMMENT $0172 Text position relative Y
FORCE_NO_SYMBOL $0172
COMMENT $0174 Text position relative X
COMMENT $0176 Vectrex BIOS print routine
FORCE_SYMBOL $0176 Print_Str_d
FORCE_SYMBOL $0179 counter
FORCE_NO_SYMBOL $0180
FORCE_NO_SYMBOL $0188
FORCE_NO_SYMBOL $018A
FORCE_SYMBOL $018D counter
FORCE_NO_SYMBOL $0190
FORCE_NO_SYMBOL $0192
FORCE_NO_SYMBOL $019A
FORCE_NO_SYMBOL $019C
COMMENT $019F check to see if C64 has responded
FORCE_NO_SYMBOL $019F
FORCE_NO_SYMBOL $01A2
FORCE_NO_SYMBOL $01A6
FORCE_SYMBOL $01AB counter
FORCE_NO_SYMBOL $01AE
COMMENT_LINE $01B4 ***************************************************************************
COMMENT_LINE $01B4 DATA SECTION
COMMENT_LINE $01B4 ***************************************************************************
COMMENT $01CE UP
COMMENT $01CF RIGHT
COMMENT $01D0 DOWN
COMMENT $01D1 LEFT
COMMENT $01D2 only capital letters
COMMENT $01D9 $80 is end of string
COMMENT_LINE $01DC ***************************************************************************
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$001D CHAR_DATA 12
RANGE $001D-$001E DB_DATA 1
RANGE $001E-$01B4 CODE
RANGE $01B4-$01B5 DB_DATA 1
RANGE $01B5-$01B6 DB_DATA 1
RANGE $01B6-$01B7 DB_DATA 1
RANGE $01B7-$01B8 DB_DATA 1
RANGE $01B8-$01B9 DB_DATA 1
RANGE $01B9-$01BA DB_DATA 1
RANGE $01BA-$01BB DB_DATA 1
RANGE $01BB-$01BC DB_DATA 1
RANGE $01BC-$01BD DB_DATA 1
RANGE $01BD-$01BE DB_DATA 1
RANGE $01BE-$01BF DB_DATA 1
RANGE $01BF-$01C0 DB_DATA 1
RANGE $01C0-$01C1 DB_DATA 1
RANGE $01C1-$01C2 DB_DATA 1
RANGE $01C2-$01C3 DB_DATA 1
RANGE $01C3-$01C4 DB_DATA 1
RANGE $01C4-$01C5 DB_DATA 1
RANGE $01C5-$01C6 DB_DATA 1
RANGE $01C6-$01C7 DB_DATA 1
RANGE $01C7-$01C8 DB_DATA 1
RANGE $01C8-$01C9 DB_DATA 1
RANGE $01C9-$01CA DB_DATA 1
RANGE $01CA-$01CB DB_DATA 1
RANGE $01CB-$01CC DB_DATA 1
RANGE $01CC-$01CD DB_DATA 1
RANGE $01CD-$01CE DB_DATA 1
RANGE $01CE-$01CF DB_DATA 1
RANGE $01CF-$01D0 DB_DATA 1
RANGE $01D0-$01D1 DB_DATA 1
RANGE $01D1-$01D2 DB_DATA 1
RANGE $01D2-$01D9 CHAR_DATA 7
RANGE $01D9-$01DC DB_DATA 3

